<?xml version="1.0"?>

<project name="IT Mill Toolkit" basedir="../" default="release">

	<!-- ant contrib required for flow control (for loop) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="build/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Release build target -->
	<target name="release" depends="package" description="Build public release. Theme files are syntax checked, optimized and obfuscated.">
	</target>

	<!-- Testing build target -->
	<target name="testing" depends="package-testing" description="Like release target but without documentation or zip. Faster iteration for functional testing.">
	</target>

	<!-- Initialization - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="init">

		<property file="build/VERSION" />
		<property name="product-file" value="itmill-toolkit" />
		<property name="product-name" value="IT Mill Toolkit" />
		<property name="toolkit-package" value="com/itmill/toolkit" />

		<property file="build/html-style.properties" />

		<!-- Destination files -->
		<property name="package-file-name" value="${product-file}-${version}.zip" />
		<property name="lib-bin-jar-name" value="${product-file}-${version}.jar" />
		<property name="lib-src-jar-name" value="${product-file}-src-${version}.jar" />
		<property name="themes-jar-name" value="${product-file}-themes-${version}.jar" />
		<property name="demo-war-name" value="${product-file}-demo-${version}.war" />

		<echo message="Prepared to build ${product-file} version ${version} packages" />

		<!-- Output directory -->
		<property name="output-dir" value="build/result/${product-file}-${version}" />
		<mkdir dir="${output-dir}" />

		<!-- Create Output Directory Hierarchy -->
		<mkdir dir="${output-dir}/doc/manual" />
		<mkdir dir="${output-dir}/doc/api" />
		<mkdir dir="${output-dir}/lib" />
		<mkdir dir="${output-dir}/demo" />

	</target>

	<!-- Themes - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="themes" depends="copy-themes-to-lib,themes-optimize-obfuscate" />

	<target name="copy-themes-to-lib" depends="init">
		<copy todir="${output-dir}/lib/themes">
			<fileset dir="WebContent/WEB-INF/lib/themes">
				<exclude name="**/.svn" />
				<include name="corporate/**/*" />
				<include name="demo/**/*" />
				<include name="base/**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Executed for release builds only -->
	<target name="themes-optimize-obfuscate" depends="copy-themes-to-lib">
		<echo>CSS syntax check and optimizing.</echo>
		<for param="file">
			<path>
				<fileset dir="${output-dir}/lib/themes">
					<include name="**/*.css" />
				</fileset>
			</path>
			<sequential>
				<echo>@{file}</echo>
				<exec dir="build" executable="cmd.exe" os="Windows 2000, Windows XP" failonerror="true">
					<arg line="/c bin\csstidy-win.exe @{file} @{file}" />
				</exec>
				<exec dir="build" executable="bin/csstidy-osx.sh" os="Mac OS X" failonerror="true">
					<arg line="@{file}" />
				</exec>
				<exec dir="build" executable="bin/csstidy-linux.sh" os="Linux" failonerror="true">
					<arg line="@{file}" />
				</exec>
			</sequential>
		</for>
		<echo>JavaScript syntax check, optimizing and obfuscation.</echo>
		<for param="file">
			<path>
				<fileset dir="${output-dir}/lib/themes">
					<include name="**/*.js" />
				</fileset>
			</path>
			<sequential>
				<echo>@{file}</echo>
				<!-- <replaceregexp file="@{file}" match="foo" replace="x1" byline="true" /> -->
				<!-- TODO: ERROR: for some reason this does not work on Windows platform -->
				<java dir="${output-dir}/lib/themes" jar="build/lib/custom_rhino.jar" fork="true" failonerror="true" maxmemory="64m" output="@{file}">
					<arg value="-c" />
					<arg value="@{file}" />
				</java>
			</sequential>
		</for>
		<fixcrlf srcdir="${output-dir}/lib/themes" includes="**/*.js **/*.css" eol="lf" eof="remove" />
	</target>

	<target name="theme-jar" depends="init, themes">
		<jar jarfile="${output-dir}/lib/${themes-jar-name}" compress="false">
			<fileset dir="${output-dir}/lib/themes">
				<patternset>
					<include name="corporate/**/*" />
					<include name="base/**/*" />
				</patternset>
			</fileset>
		</jar>
	</target>

	<!-- Libs - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<!-- Copy and preprocess sources for packaging -->
	<target name="preprocess-src" depends="init">
		<mkdir dir="build/result/src" />

		<copy todir="build/result/src">
			<filterset>
				<filter token="VERSION" value="${version}" />
			</filterset>
			<fileset dir="src">
				<patternset>
					<include name="**/*.java" />
					<include name="**/*.html" />
				</patternset>
			</fileset>
		</copy>
		<!-- Convert to CRLF's and tabs -->
		<fixcrlf srcdir="build/result/src" eol="crlf" tablength="4" tab="remove" includes="**/*.java" />

		<!-- Un-Filtered files -->
		<copy todir="build/result/src">
			<fileset dir="src">
				<patternset>
					<include name="**/*.gif" />
					<include name="**/*.jpg" />
					<include name="**/*.png" />
				</patternset>
			</fileset>
		</copy>
	</target>

	<target name="compile-java" depends="preprocess-src">
		<!-- Compile -->
		<mkdir dir="build/result/classes" />
		<javac srcdir="build/result/src" destdir="build/result/classes" classpath="build/lib/servlet-api.jar" includes="${toolkit-package}/**" />
	</target>

	<target name="libs" depends="compile-java">
		<!-- Create binary JAR -->
		<jar jarfile="${output-dir}/lib/${lib-bin-jar-name}" compress="true" includes="${toolkit-package}/**" basedir="build/result/classes" excludes="${toolkit-package}/demo/**" />
		<!-- Create source JAR -->
		<jar jarfile="${output-dir}/lib/${lib-src-jar-name}" compress="true">
			<fileset dir="build/result/src">
				<patternset>
					<include name="${toolkit-package}/**/*.java" />
					<exclude name="${toolkit-package}/demo/**/*.java" />
				</patternset>
			</fileset>
		</jar>
	</target>

	<!-- Demo  - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="demo" depends="libs,compile-java,theme-jar">
		<war warfile="${output-dir}/demo/${product-file}.war" webxml="WebContent/WEB-INF/web.xml">
			<classes dir="build/result/classes">
				<include name="${toolkit-package}/demo/**/*.class" />
			</classes>
			<classes dir="src">
				<include name="${toolkit-package}/demo/**/*.jpg" />
				<include name="${toolkit-package}/demo/**/*.png" />
				<include name="${toolkit-package}/demo/**/*.gif" />
			</classes>
			<lib dir="${output-dir}/lib">
				<include name="themes/demo/**/*" />
			</lib>
			<lib dir="${output-dir}/lib">
				<include name="${lib-bin-jar-name}" />
				<include name="${themes-jar-name}" />
			</lib>
			<fileset dir="">
				<include name="src/${toolkit-package}/demo/**/*.java" />
			</fileset>
			<fileset dir="WebContent">
				<exclude name="**/.svn" />
				<exclude name="WEB-INF/web.xml" />
				<exclude name="WEB-INF/lib/themes/**/*" />
				<include name="**/*" />
			</fileset>
		</war>

		<copy todir="${output-dir}/demo">
			<fileset dir="build/demo">
				<exclude name="**/.svn" />
			</fileset>
		</copy>

		<copy todir="${output-dir}/demo/src">
			<fileset dir="build/result/src">
				<include name="${toolkit-package}/demo/**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- Documentation- - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="docs" depends="javadoc,manual-pdf,manual-html,package-docs">
	</target>

	<target name="package-docs" depends="init">
		<copy todir="${output-dir}">
			<filterchain>
				<expandproperties />
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="body" value="${html.body.tag}${html.body.start1}${product-name}${html.body.start2}" />
					<token key="/body" value="${html.body.end}${html.body.endtag}" />
				</replacetokens>
			</filterchain>
			<fileset dir="">
				<exclude name="**/.svn" />
				<include name="*.html" />
				<include name="*.txt" />
			</fileset>
		</copy>
		<copy todir="${output-dir}">
			<fileset dir="">
				<filename name="*.pdf" />
			</fileset>
		</copy>
		<copy todir="${output-dir}/doc/manual/html-style">
			<fileset dir="doc/manual/html-style">
				<exclude name="**/.svn" />
				<exclude name="**/test.html" />
			</fileset>
		</copy>
		<copy todir="${output-dir}/doc">
			<fileset dir="doc">
				<exclude name="**/.svn" />
				<include name="dtd/**/*.dtd" />
			</fileset>
		</copy>
	</target>

	<target name="javadoc" depends="preprocess-src">
		<javadoc destdir="${output-dir}/doc/api" author="true" version="true" use="true" windowtitle="${product-name}" classpath="build/lib/servlet-api.jar">
			<packageset dir="build/result/src">
				<include name="${toolkit-package}/**" />
				<exclude name="${toolkit-package}/demo/**" />
			</packageset>
			<doctitle>
				<![CDATA[<h1>IT Mill Toolkit</h1>]]></doctitle>
		<!--			<header><![CDATA[<script type="text/javascript" src=".html-style/style.js"></script>]]></header> -->
		<bottom>
			<![CDATA[<i>Copyright &#169; 2000-2006 IT Mill Ltd. All Rights Reserved.</i>]]></bottom>
	<link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="build/javadoc/j2se-1.5.0" />
	<link offline="true" href="http://java.sun.com/j2ee/1.4/docs/api/" packagelistLoc="build/javadoc/j2ee-1.4" />
</javadoc>
</target>

<target name="book-part2" depends="dbdoclet">
<!-- TODO Add XSLT to transform dbdoclet results to book part 2 -->
</target>

<target name="dbdoclet" depends="preprocess-src">
<javadoc access="public" charset="UTF-8" docencoding="UTF-8" encoding="ISO-8859-15" failonerror="yes" classpath="build/lib/servlet-api.jar" maxmemory="512m" source="1.5">
	<packageset dir="build/result/src">
		<include name="${toolkit-package}/**" />
		<exclude name="${toolkit-package}/demo/**" />
	</packageset>
	<doclet name="org.dbdoclet.doclet.docbook.DocBookDoclet" path="build/lib/jdk${java.specification.version}/dbdoclet.jar">
		<param name="-d" value="result/docbook" />
	</doclet>
</javadoc>
</target>

<target name="manual-pdf" depends="init">
<!-- TODO Include XEP-based FO building in future -->
</target>

<target name="manual-html" depends="init">
<delete file="build/docbook/conf/temp.xsl" />
<copy file="build/docbook/conf/custom-html-docbook.xsl" tofile="build/docbook/conf/temp.xsl">
	<filterchain>
		<replacetokens>
			<token key="BODYHEADER" value="${html.body.start1}${docbook.head.title}${html.body.start2}" />
			<token key="BODYFOOTER" value="${html.body.end}" />
		</replacetokens>
	</filterchain>
</copy>
<path id="docbook-xsl.classpath">
	<pathelement path="build/lib/fop-0.92/serializer-2.7.0.jar" />
	<pathelement path="build/lib/fop-0.92/xalan-2.7.0.jar" />
	<pathelement path="build/lib/fop-0.92/xercesImpl-2.7.1.jar" />
	<pathelement path="build/lib/fop-0.92/xml-apis-1.3.02.jar" />
</path>
<java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="764m">
	<arg value="-in" />
	<arg value="doc/manual/book.xml" />
	<arg value="-xsl" />
	<arg value="build/docbook/conf/temp.xsl" />
	<arg value="-out" />
	<arg value="${output-dir}/doc/manual/index.html" />
	<arg value="-param" />
	<arg value="use.extensions" />
	<arg value="1" />
	<classpath refid="docbook-xsl.classpath" />
</java>
<delete file="build/docbook/conf/temp.xsl" />
</target>

<!-- ZIP Package creation - - - - - - - - - - - - - - - - - - - - - - - - - -->

<target name="package" depends="clean-all,libs,themes,demo,docs">
<zip zipfile="build/result/${package-file-name}">
	<fileset dir="build/result">
		<patternset>
			<include name="${product-file}-${version}/**" />
		</patternset>
	</fileset>
</zip>
</target>

<!-- As release, but no documentation or zip package -->
<target name="package-testing" depends="clean-all,libs,themes,demo,package-docs">
</target>

<!-- Clean results - - - - - - - - - - - - - - - - - - - - - - - - - -->
<target name="clean-all" depends="">
<delete dir="build/result" />
<delete file="build/docbook/conf/temp.xsl" />
</target>

</project>
