<?xml version="1.0"?>

<project name="IT Mill Toolkit" basedir="../" default="package-all">

	<!-- Package creation - - - - - - - - - - - - - - - - - - - - - - - - -

	When creating release use only "package-*" targets:
	package-all
	 * creates four release packages for three three platforms (below)
	 
	package-windows
     * itmill-toolkit-windows-<version>.zip
	
	package-linux
	 * itmill-toolkit-linux-<version>.tar.bz2
	 
	package-mac
	 * itmill-toolkit-mac-<version>.tar.gz
	 * itmill-toolkit-mac-<version>.dmg

	NOTE: This build script requires directories named ${gwt-dir}/(linux|windows|mac|mac_leopard) .
	See build.properties to define path where your gwt installation is located.
	You must unpack platform specific binaries under linux, windows and mac directories.
	${gwt-dir}/${platform} (linux|windows|mac) are used for
  	a) compile WebContent/ITMILL/widgetsets
	b) creating platform specific release ZIP/TGZ packages.
	-->

	<!-- 
	Call one of package-* targets unless you understand what you are doing 
	-->
	<target name="package-all" depends="clean-all, init, build, docs, internal-package-mac, internal-package-mac_leopard, internal-package-windows, internal-package-linux, internal-package-war" description="Build public packages for Windows, Linux and Mac platforms.">
	</target>

	<target name="package-mac" depends="clean-all, init, build, docs, internal-package-mac" description="Create public tar.gz package for Mac.">
	</target>

	<target name="package-windows" depends="clean-all, init, build, docs, internal-package-windows" description="Create public ZIP package for Windows.">
	</target>

	<target name="package-linux" depends="clean-all, init, build, docs, internal-package-linux" description="Create public tar.bz2 package for Linux.">
	</target>

	<target name="package-jar" depends="clean-all, init, libs" description="Create itmill-toolkit-x.y.z.jar file.">
	</target>
	
	<target name="package-war" depends="clean-all, init, build, docs, internal-package-mac, internal-package-war">
	</target>

	<!-- internal tests for packaging -->

	<target name="test-build" depends="clean-all, init, build" description="used for testing build.xml">
	</target>

	<target name="test-package" depends="init" description="used for testing build.xml">
		<echo>Creating package for Mac platform.</echo>
		<var name="package-platform" value="mac" />
		<var name="eclipse-launch-vmargs" value="-XstartOnFirstThread -Xms128M -Xmx512M" />
		<antcall target="add-platform-specific-files" inheritAll="true" inheritRefs="true" />
		<delete file="${result-path}/eclipse-test" followsymlinks="false" />
		<exec executable="ln" failonerror="false">
			<arg line="-s" />
			<arg line="${output-dir}" />
			<arg line="${result-path}/eclipse-test" />
		</exec>
		<!--
		<exec executable="ln" failonerror="false">
			<arg line="-s" />
			<arg line="${gwt-dir}/${package-platform}" />
			<arg line="${output-dir}/gwt" />
		</exec>
		-->
		<!--
		<antcall target="create-mac-diskimage" inheritAll="true" inheritRefs="true" />
		-->
	</target>

	<!-- Clean results - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="clean-all" depends="">
		<property file="build/build.properties" />
		<delete dir="${result-path}" includes="**/*" followsymlinks="false" defaultexcludes="false" includeemptydirs="true" failonerror="false">
		</delete>
	</target>

	<!-- Initialization - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="init">

		<property file="build/build.properties" />
		<property file="build/VERSION.properties" />
		<property file="build/html-style.properties" />

		<!-- Create result dir unless already exists -->
		<mkdir dir="${result-path}" />
		<!-- Find out which platform we are in -->
		<if>
			<contains string="${os.name}" substring="Windows" />
			<then>
				<property name="platform" value="windows" />
			</then>
		</if>
		<if>
			<equals arg1="${os.name}" arg2="Linux" />
			<then>
				<property name="platform" value="linux" />
			</then>
		</if>
		<if>
			<equals arg1="${os.name}" arg2="Mac OS X" />
			<then>
				<property name="platform" value="mac" />
			</then>
		</if>
		<!-- required when compiling WebContent/ITMILL/widgetsets (and also Java server-side classes) -->
		<property name="lib-gwt-dev" value="gwt-dev-${platform}.jar" />

		<echo>We are on ${platform} platform, using ${gwt-dir}/${platform}/${lib-gwt-dev}.</echo>

		<!-- Destination files -->
		<property name="lib-jar-name" value="${product-file}-${version}.jar" />

		<echo message="Prepared to build ${product-file} version ${version} packages" />

		<!-- Output directory -->
		<property name="output-dir" value="${result-path}/${product-file}-${version}" />
		<mkdir dir="${output-dir}" />

		<!-- Create Output Directory Hierarchy -->
		<mkdir dir="${output-dir}/WebContent" />
		<mkdir dir="${output-dir}/WebContent/demo" />
		<mkdir dir="${output-dir}/WebContent/doc" />
		<mkdir dir="${output-dir}/WebContent/doc/manual" />
		<mkdir dir="${output-dir}/WebContent/doc/api" />
		<mkdir dir="${output-dir}/WebContent/doc/example-source" />
		<mkdir dir="${output-dir}/WebContent/WEB-INF" />
		<mkdir dir="${output-dir}/WebContent/WEB-INF/lib" />
		<mkdir dir="${output-dir}/WebContent/WEB-INF/classes" />

		<!-- Construct classpath used by java and javadoc compilation -->
		<path id="compile.classpath">
			<pathelement path="${gwt-dir}/${platform}/gwt-user.jar" />
			<pathelement path="${gwt-dir}/${platform}/${lib-gwt-dev}" />
			<pathelement path="build/external/fileupload/classes" />
			<pathelement path="lib/reservr/googlemaps_gwt.jar" />
			<pathelement path="lib/jetty/jetty-6.1.7.jar" />
			<pathelement path="lib/jetty/jetty-util-6.1.7.jar" />
			<pathelement path="lib/jetty/servlet-api-2.5-6.1.7.jar" />
			<pathelement path="lib/portlet/portal-kernel.jar" />
			<pathelement path="lib/portlet/portal-service.jar" />
			<pathelement path="lib/portlet/portlet.jar" />
		</path>

	</target>

	<target name="internal-package-windows">
		<var name="package-platform" value="windows" />
		<echo>Creating package for ${package-platform} platform.</echo>
		<var name="eclipse-launch-vmargs" value="-Xms256M -Xmx512M" />
		<antcall target="add-platform-specific-files" inheritAll="true" inheritRefs="true" />
		<zip zipfile="${result-path}/${product-file}-${package-platform}-${version}.zip">
			<zipfileset prefix="${product-file}-${package-platform}-${version}" dir="${result-path}/${product-file}-${version}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</zipfileset>
			<zipfileset prefix="${product-file}-${package-platform}-${version}/gwt" dir="${gwt-dir}/${package-platform}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</zipfileset>
		</zip>
	</target>

	<target name="internal-package-linux">
		<var name="package-platform" value="linux" />
		<echo>Creating package for ${package-platform} platform.</echo>
		<var name="eclipse-launch-vmargs" value="-Xms256M -Xmx512M" />
		<antcall target="add-platform-specific-files" inheritAll="true" inheritRefs="true" />
		<tar destfile="${result-path}/${product-file}-${package-platform}-${version}.tar.gz" compression="gzip" longfile="gnu">
			<!-- TODO use very slow but effective bzip2
			<tar destfile="${result-path}/${product-file}-${package-platform}-${version}.tar.bz2" compression="bzip2" longfile="gnu">
		-->
			<tarfileset prefix="${product-file}-${package-platform}-${version}" dir="${result-path}/${product-file}-${version}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="${product-file}-${package-platform}-${version}/gwt" dir="${gwt-dir}/${package-platform}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
		</tar>
	</target>

	<target name="internal-package-mac">
		<var name="package-platform" value="mac" />
		<echo>Creating package for ${package-platform} platform.</echo>
		<var name="eclipse-launch-vmargs" value="-XstartOnFirstThread -Xms256M -Xmx512M" />
		<antcall target="add-platform-specific-files" inheritAll="true" inheritRefs="true" />
		<tar destfile="${result-path}/${product-file}-${package-platform}-${version}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="${product-file}-${package-platform}-${version}" dir="${result-path}/${product-file}-${version}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="${product-file}-${package-platform}-${version}/gwt" dir="${gwt-dir}/${package-platform}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
		</tar>
		<!-- TODO: remove me: DISABLE for speed -->
		<!-- <antcall target="create-mac-diskimage" inheritAll="true" inheritRefs="true" /> -->
	</target>

	<target name="internal-package-mac_leopard">
		<var name="package-platform" value="mac" />
		<echo>Creating package for ${package-platform}_leopard platform.</echo>
		<var name="eclipse-launch-vmargs" value="-XstartOnFirstThread -Xms256M -Xmx512M" />
		<antcall target="add-platform-specific-files" inheritAll="true" inheritRefs="true" />
		<var name="package-platform" value="mac_leopard" />
		<tar destfile="${result-path}/${product-file}-${package-platform}-${version}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="${product-file}-${package-platform}-${version}" dir="${result-path}/${product-file}-${version}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="${product-file}-${package-platform}-${version}/gwt" dir="${gwt-dir}/${package-platform}">
				<patternset>
					<include name="**/*" />
				</patternset>
			</tarfileset>
		</tar>
		<!-- TODO: remove me: DISABLE for speed -->
		<!-- <antcall target="create-mac-diskimage" inheritAll="true" inheritRefs="true" /> -->
	</target>

	<target name="internal-package-war">
		<echo>Building WAR</echo>
		<war warfile="${output-dir}/${product-file}.war">
			<fileset dir="${output-dir}/WebContent">
				<include name="**/*" />
			</fileset>
			<lib dir="${output-dir}/WebContent/WEB-INF/lib">
				<include name="${lib-jar-name}" />
			</lib>
		</war>
	</target>


	<target name="create-mac-diskimage">
		<!-- create Mac disk image (dmg) also -->
		<property name="mount.dir" value="${result-path}/mac-mounted-image" />
		<mkdir dir="${mount.dir}" />
		<delete file="${result-path}/*.dmg" />
		<if>
			<equals arg1="${platform}" arg2="mac" />
			<then>
				<untar src="${result-path}/${product-file}-${package-platform}-${version}.tar.gz" dest="${result-path}/" compression="gzip" />
				<echo>Creating Mac disk image (dmg)</echo>
				<!-- create image -->
				<echo>hdiutil create -format UDRW -volname ${product-file}-${version} -srcfolder ${result-path}/${product-file}-${package-platform}-${version} ${result-path}/disk-image.dmg</echo>
				<exec executable="hdiutil" failonerror="true">
					<arg line="create -format UDRW -volname ${product-file}-${version} -srcfolder ${result-path}/${product-file}-${package-platform}-${version} ${result-path}/disk-image.dmg" />
				</exec>
				<!-- open image -->
				<exec executable="hdiutil" failonerror="true">
					<arg line='attach' />
					<arg line='-readwrite' />
					<arg line='-noverify' />
					<arg line='-noautoopen' />
					<arg line='-mountpoint ${mount.dir}' />
					<arg line='${result-path}/disk-image.dmg' />
				</exec>
				<!-- make sure root folder is opened when image is -->
				<exec executable="bless" failonerror="true">
					<arg line='--folder ${mount.dir}' />
					<arg line='--openfolder ${mount.dir}' />
				</exec>
				<!-- hack: wait for completion -->
				<exec executable="sleep" failonerror="true">
					<arg line='2' />
				</exec>
				<!-- here we could position items -->
				<!--
				<exec executable="osascript" failonerror="true">
					<arg line='package/positionItems.scpt ${mount.dir}' />
				</exec>
				-->
				<!-- turn on volume icon -->
				<exec executable="/Developer/Tools/SetFile" failonerror="true">
					<arg line='-a C' />
					<arg line='${mount.dir}' />
				</exec>
				<!-- set executable bit -->
				<chmod file="${mount.dir}/start.sh" perm="ugo+x" />
				<!-- close image -->
				<exec executable="hdiutil" failonerror="true">
					<arg line='detach ${mount.dir}/' />
				</exec>
				<!-- make read-only -->
				<exec executable="hdiutil" failonerror="true">
					<arg line='convert ${result-path}/disk-image.dmg' />
					<arg line='-format UDZO' />
					<arg line='-imagekey zlib-level=9' />
					<arg line='-o ${result-path}/${product-file}-${package-platform}-${version}.dmg' />
				</exec>
				<delete file="${result-path}/disk-image.dmg" />
				<!-- internet-enable -->
				<exec executable="hdiutil" failonerror="true">
					<arg line='internet-enable ${result-path}/${product-file}-${package-platform}-${version}.dmg' />
				</exec>
			</then>
		</if>
	</target>

	<target name="add-platform-specific-files">
		<echo>Adding platform specific files for ${package-platform}</echo>
		<delete includeemptydirs="true" defaultexcludes="false">
			<fileset dir="${output-dir}">
				<include name=".*" />
				<include name="*.launch" />
				<include name="*.txt" />
				<include name="*.bat" />
				<include name="*.sh" />
				<include name="*.app" />
				<include name="build-widgetsets.xml" />
			</fileset>
		</delete>
		<copy todir="${output-dir}">
			<filterchain>
				<expandproperties />
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="version" value="${version}" />
					<token key="/version" value="" />
				</replacetokens>
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="platform" value="${package-platform}" />
					<token key="/platform" value="" />
				</replacetokens>
			</filterchain>
			<fileset dir="WebContent/license">
				<include name="COPYING" />
			</fileset>
		</copy>
		<copy todir="${output-dir}/WebContent">
			<filterchain>
				<expandproperties />
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="version" value="${version}" />
					<token key="/version" value="" />
				</replacetokens>
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="platform" value="${package-platform}" />
					<token key="/platform" value="" />
				</replacetokens>
			</filterchain>
			<fileset dir="WebContent">
				<exclude name="**/.svn" />
				<exclude name="windoweddemos.html" />
				<include name="release-notes.html" />
				<include name="*.html" />
				<include name="license/*.html" />
				<include name="license/*.txt" />
			</fileset>
		</copy>
		<copy file="build/package/${package-platform}-readme.txt" tofile="${output-dir}/readme.txt">
			<filterchain>
				<expandproperties />
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="version" value="${version}" />
					<token key="/version" value="" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${output-dir}">
			<filterchain>
				<expandproperties />
				<!-- .classpath, *.launch, build-widgetsets.xml -->
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="version" value="${version}" />
					<token key="/version" value="" />
				</replacetokens>
				<!-- .classpath -->
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="platform-specific-entries" value="&lt;classpathentry kind=&quot;lib&quot; path=&quot;gwt/gwt-dev-${package-platform}.jar&quot; /&gt;" />
					<token key="/platform-specific-entries" value="" />
				</replacetokens>
				<!-- .classpath, HostedMode.launch, build-widgetsets.xml -->
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="platform" value="${package-platform}" />
					<token key="/platform" value="" />
				</replacetokens>
				<!-- .project, *.launch -->
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="eclipse-workspace-name" value="${eclipse-workspace-name}" />
					<token key="/eclipse-workspace-name" value="" />
				</replacetokens>
				<!-- HostedMode.launch -->
				<replacetokens begintoken="&lt;" endtoken=">">
					<token key="eclipse-launch-vmargs" value="${eclipse-launch-vmargs}" />
					<token key="/eclipse-launch-vmargs" value="" />
				</replacetokens>
			</filterchain>
			<fileset dir="build/package">
				<include name="eclipse-classpath" />
				<include name="eclipse-project" />
				<include name="eclipse*launch" />
				<include name="build-widgetsets.xml" />
			</fileset>
		</copy>

		<move file="${output-dir}/eclipse-classpath" tofile="${output-dir}/.classpath" />
		<move file="${output-dir}/eclipse-project" tofile="${output-dir}/.project" />
		<move file="${output-dir}/eclipse-IT Mill Toolkit Hosted Mode-launch" tofile="${output-dir}/IT Mill Toolkit Hosted Mode.launch" />
		<move file="${output-dir}/eclipse-IT Mill Toolkit Web Mode-launch" tofile="${output-dir}/IT Mill Toolkit Web Mode.launch" />
		<if>
			<equals arg1="${package-platform}" arg2="windows" />
			<then>
				<copy todir="${output-dir}">
					<fileset dir="build/package">
						<include name="start.bat" />
					</fileset>
				</copy>
			</then>
		</if>
		<if>
			<equals arg1="${package-platform}" arg2="linux" />
			<then>
				<copy todir="${output-dir}">
					<fileset dir="build/package">
						<include name="start.sh" />
					</fileset>
				</copy>
				<chmod file="${output-dir}/start.sh" perm="ugo+x" />
				<exec executable="chmod" failonerror="false">
					<arg line="ugo+x" />
					<arg line="${output-dir}/start.sh" />
				</exec>
			</then>
		</if>
		<if>
			<equals arg1="${package-platform}" arg2="mac" />
			<then>
				<copy todir="${output-dir}">
					<fileset dir="build/package">
						<include name="start.sh" />
					</fileset>
				</copy>
				<!-- must be done manually -->
				<!-- <exec executable="cp" failonerror="true">
					<arg line="-r" />
					<arg line="build/package/Start.app" />
					<arg line="${output-dir}" />
				</exec> -->
				<!-- but again, ant just fails with any * or other special characters -->
				<!-- package icon or folder background image / icon placements not in use -->
				<!--
				<exec executable="cp" failonerror="true">
					<arg line="build/package/Icon*" />
					<arg line="${output-dir}" />
				</exec>
				<exec executable="cp" failonerror="true">
					<arg line="build/package/mac-DS_Store" />
					<arg line="${output-dir}/.DS_Store" />
				</exec>
				<copy file="build/package/mac-VolumeIcon.icns" tofile="${output-dir}/.VolumeIcon.icns" />
				-->
				<chmod file="${output-dir}/start.sh" perm="ugo+x" />
				<exec executable="chmod" failonerror="false">
					<arg line="ugo+x" />
					<arg line="${output-dir}/start.sh" />
				</exec>
			</then>
		</if>
	</target>

	<target name="build" depends="demo" description="Build package required files, without packing them.">
	</target>

	<!-- Copy and preprocess sources for packaging 
	NOTE: Replaces <version></version> tags with build version tag for some "textual" files
	-->
	<target name="preprocess-src">
		<loadfile property="ITMillApache2LicenseForJavaFiles" srcFile="build/ITMillApache2LicenseForJavaFiles.txt" />
		<mkdir dir="${result-path}/src" />
		<echo>Copying src directory and processing copied files.</echo>
		<echo>Replacing &lt;version&gt; tag with build version for java/html/css/xml files.</echo>
		<copy todir="${result-path}/src">
			<filterset>
				<filter token="ITMillApache2LicenseForJavaFiles" value="${ITMillApache2LicenseForJavaFiles}" />
				<filter token="VERSION" value="${version}" />
			</filterset>
			<fileset dir="src">
				<patternset>
					<include name="**/*.java" />
					<include name="**/*.html" />
					<include name="**/*.css" />
					<include name="**/*.xml" />
				</patternset>
			</fileset>
		</copy>

		<!-- Unify mix usage of mac/Linux/Win characters -->
		<echo>Unifying mix usage of Mac/Linux/Win linefeeds for java/html/css/xml files.</echo>
		<fixcrlf srcdir="${result-path}/src" eol="crlf" tablength="4" tab="asis" includes="**/*.java **/*.html **/*.css **/*.xml" />

		<!-- Add other files such as images, these are not filtered or processed by fixcrlf task -->
		<echo>Copying non java/html/css/xml files such as images.</echo>
		<copy todir="${result-path}/src">
			<fileset dir="src">
				<patternset>
					<exclude name="**/.svn" />
					<exclude name="**/*.java" />
					<exclude name="**/*.html" />
					<exclude name="**/*.css" />
					<exclude name="**/*.xml" />
				</patternset>
			</fileset>
		</copy>

	</target>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  WebContent
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="webcontent" depends="preprocess-src,defaulttheme">

		<!-- copy 3rd part libraries used by demo -->
		<copy todir="${output-dir}/WebContent/demo/lib">
			<fileset dir="lib">
				<include name="reservr/**/*" />
			</fileset>
		</copy>
		<copy todir="${output-dir}/WebContent/demo/lib">
			<fileset dir="lib">
				<include name="jetty/**/*" />
			</fileset>
		</copy>

		<!-- Add demo sources -->
		<echo>Adding demo sources to WebContent/WEB-INF/src</echo>
		<copy todir="${output-dir}/WebContent/WEB-INF/src">
			<fileset dir="${result-path}/src">
				<include name="${toolkit-package}/demo/**/*" />
			</fileset>
		</copy>

		<echo>Creating demo source html files</echo>
		<java2html srcdir="${output-dir}/WebContent/WEB-INF/src/${toolkit-package}/demo" destdir="${output-dir}/WebContent/doc/example-source/${toolkit-package}/demo" includes="**/*.java" style="eclipse" showLineNumbers="false" showFileName="true" showTableBorder="false" />

		<!-- Add WebContent -->
		<echo>Adding ITMILL/themes, demo and hsqldb.jar files.</echo>
		<copy todir="${output-dir}/WebContent">
			<fileset dir="WebContent">
				<exclude name="**/.svn" />
				<!-- TODO check what is neccessary -->
				<exclude name="ITMILL/themes/tests*" />
				<exclude name="ITMILL/themes/tests-magi/**/*" />
				<exclude name="ITMILL/themes/tests-featurebrowser/**/*" />
				<exclude name="ITMILL/themes/tests*/**/*" />
				<include name="demo/**/*" />
				<include name="WEB-INF/lib/hsqldb.jar" />
				<include name="ITMILL/themes/**/*" />
				<include name="META-INF/**/*" />
			</fileset>
		</copy>

		<!-- Add package specific WebContent files from build/package/WebContent -->
		<copy todir="${output-dir}/WebContent">
			<fileset dir="build/package/WebContent">
				<exclude name="**/.*" />
				<include name="**/*" />
			</fileset>
		</copy>

	</target>

	<target name="compile-fileupload">
		<echo>Compiling custom fileupload classes.</echo>
		<ant dir="build/external/fileupload" antfile="build.xml" target="compile" />
	</target>

	<target name="compile-java" depends="compile-fileupload, webcontent">
		<echo>Compiling src (server-side)</echo>
		<!-- Compile -->
		<mkdir dir="${result-path}/classes" />
		<javac source="1.4" target="1.4" classpathref="compile.classpath" srcdir="${result-path}/src" destdir="${result-path}/classes" includes="${toolkit-package}/**" debug="true">
		</javac>
	</target>
	
	<target name="defaulttheme" >
		<echo>Combining default themes css files</echo>
		<!-- ensure buildhelpers are compiled -->
		<javac source="1.4" target="1.4" srcdir="build/buildhelpers"/>
		<java classname="com.itmill.toolkit.buildhelpers.CompileDefaultTheme" failonerror="yes" fork="yes">
			<classpath>
				<pathelement location="build/buildhelpers" />
			</classpath>
		</java>
	</target>

	<target name="compile-client-side" depends="webcontent">
		<echo>Compiling src (client-side)</echo>
		<echo>com.itmill.toolkit.terminal.gwt.DefaultWidgetSet</echo>
		<java classname="com.google.gwt.dev.GWTCompiler" failonerror="yes" fork="yes" maxmemory="512m">
			<arg value="-out" />
			<arg value="${output-dir}/WebContent/ITMILL/widgetsets" />
			<arg value="com.itmill.toolkit.terminal.gwt.DefaultWidgetSet" />
			<arg value="-style" />
			<arg value="OBF" />
			<classpath>
				<pathelement location="${gwt-dir}/${platform}/gwt-user.jar" />
				<pathelement location="${gwt-dir}/${platform}/${lib-gwt-dev}" />
				<pathelement location="${result-path}/src" />
			</classpath>
		</java>

		<echo>com.itmill.toolkit.demo.reservation.gwt.ReservationWidgetSet</echo>
		<java classname="com.google.gwt.dev.GWTCompiler" failonerror="yes" fork="yes" maxmemory="512m">
			<arg value="-out" />
			<arg value="${output-dir}/WebContent/ITMILL/widgetsets" />
			<arg value="com.itmill.toolkit.demo.reservation.gwt.ReservationWidgetSet" />
			<arg value="-style" />
			<arg value="OBF" />
			<classpath>
				<pathelement location="${gwt-dir}/${platform}/gwt-user.jar" />
				<pathelement location="${gwt-dir}/${platform}/${lib-gwt-dev}" />
				<pathelement location="${result-path}/src" />
				<!-- demo jars -->
				<pathelement location="${output-dir}/WebContent/demo/lib/reservr/googlemaps_gwt.jar" />
				<!-- demo widgetset sources -->
				<pathelement path="${output-dir}/WebContent/WEB-INF/src" />
			</classpath>
		</java>

		<echo>com.itmill.toolkit.demo.colorpicker.gwt.ColorPickerWidgetSet</echo>
		<java classname="com.google.gwt.dev.GWTCompiler" failonerror="yes" fork="yes" maxmemory="512m">
			<arg value="-out" />
			<arg value="${output-dir}/WebContent/ITMILL/widgetsets" />
			<arg value="com.itmill.toolkit.demo.colorpicker.gwt.ColorPickerWidgetSet" />
			<arg value="-style" />
			<arg value="OBF" />
			<classpath>
				<pathelement location="${gwt-dir}/${platform}/gwt-user.jar" />
				<pathelement location="${gwt-dir}/${platform}/${lib-gwt-dev}" />
				<pathelement location="${result-path}/src" />
				<!-- demo widgetset sources -->
				<pathelement path="${output-dir}/WebContent/WEB-INF/src" />
			</classpath>
		</java>
	</target>

	<target name="libs" depends="compile-java, compile-client-side">
		<echo>Creating libs (server-side) ${lib-jar-name}</echo>
		<!-- Create Toolkit JAR -->
		<jar jarfile="${output-dir}/WebContent/WEB-INF/lib/${lib-jar-name}" compress="true">
			<fileset dir="${result-path}/classes">
				<patternset>
					<exclude name="${toolkit-package}/demo/**" />
					<exclude name="${toolkit-package}/tests/**" />
					<exclude name="${toolkit-package}/launcher/**" />
				</patternset>
			</fileset>
			<!-- fileupload, see build/external/fileupload/build.xml -->
			<fileset dir="build/external/fileupload/classes">
				<include name="**/*" />
			</fileset>
			<!-- add sources -->
			<fileset dir="${result-path}/src">
				<patternset>
					<exclude name="${toolkit-package}/demo/**" />
					<exclude name="${toolkit-package}/tests/**" />
					<exclude name="${toolkit-package}/launcher/**" />
				</patternset>
			</fileset>
			<fileset dir="${output-dir}/WebContent">
				<patternset>
					<include name="ITMILL/widgetsets/com.itmill.toolkit.terminal.gwt.DefaultWidgetSet/**/*" />
					<include name="ITMILL/themes/default/**/*" />
				</patternset>
			</fileset>
		</jar>
		<copy file="${output-dir}/WebContent/WEB-INF/lib/${lib-jar-name}" tofile="${output-dir}/WebContent/${lib-jar-name}" />
	</target>

	<!-- Demo  - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="demo" depends="libs, docs">
		<echo>Building demo</echo>
		<echo>Adding demo class files.</echo>
		<copy todir="${output-dir}/WebContent/WEB-INF/classes">
			<fileset dir="${result-path}/classes">
				<include name="${toolkit-package}/demo/**/*" />
				<!-- user might want to tweak launcher classes -->
				<include name="${toolkit-package}/launcher/**" />
			</fileset>
		</copy>

		<echo>Adding source for demo</echo>
		<copy todir="${output-dir}/WebContent/WEB-INF/src">
			<fileset dir="${result-path}/src">
				<include name="${toolkit-package}/demo/**/*" />
				<!-- user might want to tweak launcher classes -->
				<include name="${toolkit-package}/launcher/**" />
			</fileset>
		</copy>
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Documentation 
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="docs" depends="javadoc,manual-pdf,manual-html,package-docs">
	</target>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Documentation: Add documentation including style files
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="package-docs">
		<copy todir="${output-dir}/WebContent/doc/manual/html-style">
			<fileset dir="doc/manual/html-style">
				<exclude name="**/.svn" />
				<exclude name="**/test.html" />
			</fileset>
		</copy>
		<copy todir="${output-dir}/WebContent/doc">
			<fileset dir="doc">
				<exclude name="**/.svn" />
				<include name="dtd/**/*.dtd" />
			</fileset>
		</copy>
	</target>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Documentation: Add Javadoc to doc
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="javadoc" depends="preprocess-src">
		<javadoc destdir="${output-dir}/WebContent/doc/api" author="true" version="true" use="true" windowtitle="${product-name}" classpathref="compile.classpath">
			<packageset dir="${result-path}/src">
				<include name="${toolkit-package}/**" />
				<exclude name="${toolkit-package}/demo/**" />
				<exclude name="${toolkit-package}/tests/**/*" />
			</packageset>
			<doctitle>${javadoc.doctitle}</doctitle>
			<!-- <header><![CDATA[<script type="text/javascript" src=".html-style/style.js"></script>]]></header> -->
			<bottom>${javadoc.bottom}</bottom>
			<link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="build/javadoc/j2se-1.5.0" />
			<link offline="true" href="http://java.sun.com/j2ee/1.4/docs/api/" packagelistLoc="build/javadoc/j2ee-1.4" />
		</javadoc>
	</target>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Documentation: Add book part 2 (TBD)   
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="book-part2" depends="dbdoclet">
		<!-- TODO Add XSLT to transform dbdoclet results to book part 2 -->
	</target>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Documentation: Add manual
   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<target name="dbdoclet" depends="preprocess-src">
		<echo>Manual: DocBookDoclet</echo>
		<javadoc access="public" charset="UTF-8" docencoding="UTF-8" encoding="ISO-8859-15" failonerror="yes" classpath="build/lib/servlet-api.jar" maxmemory="512m" source="1.5">
			<packageset dir="${result-path}/src">
				<include name="${toolkit-package}/**" />
				<exclude name="${toolkit-package}/demo/**" />
				<exclude name="${toolkit-package}/tests/**/*" />
			</packageset>
			<doclet name="org.dbdoclet.doclet.docbook.DocBookDoclet" path="build/lib/jdk${java.specification.version}/dbdoclet.jar">
				<param name="-d" value="result/docbook" />
			</doclet>
		</javadoc>
	</target>

	<!-- XEP-based FO building -->
	<target name="manual-pdf">
		<echo>PDF Manual: processing images (TBD)</echo>
		<!-- TBD -->
		<echo>PDF Manual: converting xml to fo</echo>
		<java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="512m">
			<arg value="-xsl" />
			<arg value="build/docbook/conf/custom-fo-docbook.xsl" />
			<arg value="-in" />
			<arg value="doc/manual/book.xml" />
			<arg value="-out" />
			<arg value="${result-path}/book.fo" />
			<arg value="-param" />
			<arg value="section.autolabel" />
			<arg value="1" />
			<arg value="-param" />
			<arg value="section.label.includes.component.label" />
			<arg value="1" />
			<arg value="-param" />
			<arg value="section.autolabel.max.depth" />
			<arg value="2" />
			<arg value="-param" />
			<arg value="draft.watermark.image" />
			<arg value="''" />
			<arg value="-param" />
			<arg value="draft.mode" />
			<arg value="'no'" />
			<classpath>
				<pathelement location="build/lib/xalan.jar" />
				<pathelement location="build/lib/xercesImpl.jar" />
				<pathelement location="build/lib/xml-apis.jar" />
			</classpath>
		</java>
		<echo>PDF Manual: converting fo to pdf</echo>
		<!-- Run XEP FO processor to convert FO to PDF -->
		<java classname="com.renderx.xep.XSLDriver" error="${result-path}/xep-error.log" failonerror="yes" fork="yes" maxmemory="512m" input="${result-path}/book.fo" output="${output-dir}/WebContent/doc/manual.pdf">
			<arg value="-Dcom.renderx.xep.CONFIG=build/lib/XEP/xep.xml" />
			<classpath>
				<pathelement location="build/lib/XEP/lib/tools.jar" />
				<pathelement location="build/lib/XEP/lib/xep.jar" />
				<pathelement location="build/lib/XEP/lib/saxon.jar" />
				<pathelement location="build/lib/XEP/lib/xt.jar" />
			</classpath>
		</java>
	</target>

	<target name="manual-html">
		<echo>Manual: HTML</echo>
		<delete file="build/docbook/conf/temp.xsl" />
		<copy file="build/docbook/conf/custom-html-docbook.xsl" tofile="build/docbook/conf/temp.xsl">
			<filterchain>
				<replacetokens>
					<token key="BODYHEADER" value="${html.body.start1}${docbook.head.title}${html.body.start2}" />
					<token key="BODYFOOTER" value="${html.body.end}" />
				</replacetokens>
			</filterchain>
		</copy>
		<path id="docbook-xsl.classpath">
			<pathelement path="build/lib/fserializer.jar" />
			<pathelement path="build/lib/xalan.jar" />
			<pathelement path="build/lib/xercesImpl.jar" />
			<pathelement path="build/lib/xml-apis.jar" />
		</path>
		<java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="1300m">
			<arg value="-in" />
			<arg value="doc/manual/book.xml" />
			<arg value="-xsl" />
			<arg value="build/docbook/conf/temp.xsl" />
			<arg value="-out" />
			<arg value="${output-dir}/WebContent/doc/manual/index.html" />
			<arg value="-param" />
			<arg value="section.autolabel" />
			<arg value="1" />
			<arg value="-param" />
			<arg value="section.label.includes.component.label" />
			<arg value="1" />
			<arg value="-param" />
			<arg value="section.autolabel.max.depth" />
			<arg value="2" />
			<arg value="-param" />
			<arg value="use.extensions" />
			<arg value="1" />
			<classpath refid="docbook-xsl.classpath" />
		</java>
		<delete file="build/docbook/conf/temp.xsl" />
		<copy todir="${output-dir}/WebContent/doc/manual/img">
			<fileset dir="doc/manual/img">
				<exclude name="**/.svn" />
			</fileset>
		</copy>
	</target>

	<!-- ant contrib required for flow control (for loop, if, property override) -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="build/lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- java2html converter -->
	<taskdef name="java2html" classname="de.java2html.anttasks.Java2HtmlTask" classpath="build/lib/java2html.jar" />

</project>
