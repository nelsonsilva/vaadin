package com.itmill.toolkit.ui;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import com.itmill.toolkit.event.Action;
import com.itmill.toolkit.event.ShortcutAction;
import com.itmill.toolkit.terminal.PaintException;
import com.itmill.toolkit.terminal.PaintTarget;
import com.itmill.toolkit.ui.Button.ClickEvent;

public class Slider extends AbstractComponent {
	
	public static final int ORIENTATION_HORIZONTAL = 0;
	public static final int ORIENTATION_VERTICAL = 1;
	
	/* Minimum value of slider */
	private int min = 0;
	/* Maximum value of slider */
	private int max = 100;
	
	/* Resolution, how many digits are considered relevant after desimal point */
	private int resolution = 2;
	
	/* Current value */
	private Object value;
	
	/* Object values for slider in stead of numeric.
	 * If this is set, min, max and resolution values are ignored.
	 */
	private Object[] values;
	
	private int orientation = ORIENTATION_HORIZONTAL;
	
	private List listeners;
	
	private int width;
	private int height;
	
	public Object getValue() {
		return value;
	}
	
	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	public int getMax() {
		return max;
	}

	public void setMax(int max) {
		this.max = max;
	}

	public int getMin() {
		return min;
	}

	public void setMin(int min) {
		this.min = min;
	}

	public int getOrientation() {
		return orientation;
	}

	public void setOrientation(int orientation) {
		this.orientation = orientation;
	}

	public int getResolution() {
		return resolution;
	}

	public void setResolution(int resolution) {
		this.resolution = resolution;
	}

	public Object[] getValues() {
		return values;
	}

	public void setValues(Object[] values) {
		this.values = values;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public List getListeners() {
		return listeners;
	}
	
	public void addListener(SlideListener l) {
		addListener(SlideEvent.class, l, SLIDER_SLIDE_METHOD);
	}
	
	public void removeListener(SlideListener l) {
		removeListener(SlideEvent.class, l, SLIDER_SLIDE_METHOD);
	}

	public String getTag() {
		return "slider";
	}
	
	public interface SlideListener {
		public void slide(SlideEvent s);
	}
	
	public void paintContent(PaintTarget target) throws PaintException {
		super.paintContent(target);
		// TODO
	}

	/**
	 * Invoked when the value of a variable has changed. Slider listeners are
	 * notified if the slider value has changed.
	 * 
	 * @param source
	 * @param variables
	 */
	public void changeVariables(Object source, Map variables) {
		if (variables.containsKey("value")) {
			// TODO update value
			fireSlide();
		}
	}
	
	
	/* **************************************************
	 * Event handling classes and methods
	 */
	
	public class SlideEvent extends Component.Event {

		public SlideEvent(Component source) {
			super(source);
		}
		
		public Slider getSlider() {
			return (Slider) getSource();
		}

		/**
		 * Serial generated by Eclipse.
		 */
		private static final long serialVersionUID = -2092497444591455077L;
		
	}
	
	protected void fireSlide() {
		fireEvent(new Slider.SlideEvent(this));
	}
	
	/* Slide event ************************************************ */

	private static final Method SLIDER_SLIDE_METHOD;
	static {
		try {
			SLIDER_SLIDE_METHOD = SlideListener.class.getDeclaredMethod(
					"slide", new Class[] { ClickEvent.class });
		} catch (java.lang.NoSuchMethodException e) {
			// This should never happen
			throw new java.lang.RuntimeException();
		}
	}

}
