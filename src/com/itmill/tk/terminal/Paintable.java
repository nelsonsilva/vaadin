/* *************************************************************************
 
   								Millstone(TM) 
   				   Open Sourced User Interface Library for
   		 		       Internet Development with Java

             Millstone is a registered trademark of IT Mill Ltd
                  Copyright (C) 2000-2005 IT Mill Ltd
                     
   *************************************************************************

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   license version 2.1 as published by the Free Software Foundation.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

   *************************************************************************
   
   For more information, contact:
   
   IT Mill Ltd                           phone: +358 2 4802 7180
   Ruukinkatu 2-4                        fax:  +358 2 4802 7181
   20540, Turku                          email: info@itmill.com
   Finland                               company www: www.itmill.com
   
   Primary source for MillStone information and releases: www.millstone.org

   ********************************************************************** */

package com.itmill.tk.terminal;

import java.util.EventObject;

/** Interface implemented by all classes that can be painted. 
 * Classes implementing this interface know how to output themselves 
 * to a UIDL stream and that way describing to the terminal how it 
 * should be displayed in the UI.
 *
 * @author IT Mill Ltd.
 * @version @VERSION@
 * @since 3.0
 */
public interface Paintable extends java.util.EventListener {
    
	/** <p>Paints the paintable into a UIDL stream. This method creates
	 * the UIDL sequence describing it and outputs it to the given UIDL
	 * stream.</p>
	 * 
	 * <p>It's is called when the contents of the component should be
	 * painted in response to the component first being shown or having been
	 * altered so that its visual representation is changed.</p>
	 * 
	 * @param target target UIDL stream where the component should paint
	 * itself to
	 * @throws PaintException if the paint operation failed
	 * @throws InvalidUIDLException if incorrect UIDL is writted, and
	 * the error can be dealt with inside this method call.
	 */
    public void paint(PaintTarget target) throws PaintException;
    
	/** Requests that the paintable should be repainted as soon as possible.
	 */
	public void requestRepaint();
	
	/** Repaint request event is thrown when the paintable needs to be repainted. 
	 * This is typically done when the paint() method would return dissimilar
	 * UIDL from the previous call of the method. 
	 */
	public class RepaintRequestEvent extends EventObject {
	
		/**
         * Serial generated by eclipse.
         */
        private static final long serialVersionUID = 3256725095530442805L;

        /** Construct new event.
		 * @param source The paintable needing repaint
		 */
		public RepaintRequestEvent(Paintable source) {
			super(source);	
		}
		
		/** Get the paintable needing repainting. 
		 * @return Paintable for which the paint() method will return 
		 * dissimilar UIDL from the previous call of the method. 
		 */
		public Paintable getPaintable() {
			return (Paintable) getSource();	
		}
	}
	
	/** Listen repaint requests. The repaintRequested() method is called when the 
	 * paintable needs to be repainted. 
	 * This is typically done when the paint() method would return dissimilar
	 * UIDL from the previous call of the method. 
	 */
	public interface RepaintRequestListener {

		/** Receive repaint request events. 
		 * @param event The repaint request event specifying the paintable source. 
		 */
		public void repaintRequested(RepaintRequestEvent event);
	}
	
	/** Add repaint request listener. In order to assure that no repaint requests are
	 * missed, the new repaint listener should paint the paintable right after adding
	 * itself as listener.
	 * @param listener to be added
	 */
	public void addListener(RepaintRequestListener listener);

	/** Remove repaint request listener. 
	 * @param listener to be removed
	 */
	public void removeListener(RepaintRequestListener listener);
	
	/** Request sending of repaint events on any further visible changes.
	 * Normally the paintable only send up to one repaint request
	 * for listeners after paint as the paintable as the paintable
	 * assumes that the listeners already know about the repaint need.
	 * This method resets the assumtion. Paint implicitly does the
	 * assumtion reset functionality implemented by this method.
	 * 
	 * This method is normally used only by the terminals to note
	 * paintables about implicit repaints (painting the component
	 * without actually invoking paint method).
	 */
	public void requestRepaintRequests();
}
