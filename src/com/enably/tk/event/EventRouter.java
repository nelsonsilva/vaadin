/* *************************************************************************
 
   								Millstone(TM) 
   				   Open Sourced User Interface Library for
   		 		       Internet Development with Java

             Millstone is a registered trademark of IT Mill Ltd
                  Copyright (C) 2000-2005 IT Mill Ltd
                     
   *************************************************************************

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   license version 2.1 as published by the Free Software Foundation.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

   *************************************************************************
   
   For more information, contact:
   
   IT Mill Ltd                           phone: +358 2 4802 7180
   Ruukinkatu 2-4                        fax:  +358 2 4802 7181
   20540, Turku                          email: info@itmill.com
   Finland                               company www: www.itmill.com
   
   Primary source for MillStone information and releases: www.millstone.org

   ********************************************************************** */

package com.enably.tk.event;

import java.util.EventObject;
import java.util.LinkedList;
import java.util.Iterator;
import java.lang.reflect.Method;

/** Event router class implementing the MillStone inheritable event
 * listening model. For more information on the event model see the
 * {@link com.enably.tk.event package documentation}.
 *
 * @author IT Mill Ltd.
 * @version @VERSION@
 * @since 3.0
 */
public class EventRouter implements MethodEventSource {
    
    /** List of registered listeners. */
    private LinkedList listenerList =  null;
    
	/* Registers a new listener with the specified activation method to
	 * listen events generated by this component.
	 * Don't add a JavaDoc comment here, we use the default documentation
	 * from implemented interface.
	 */
    public void addListener(Class eventType, Object object, Method method) {
        
        if (listenerList == null)
            listenerList = new LinkedList();
        
        listenerList.add(new ListenerMethod(eventType, object, method));
    }
    
	/* Registers a new listener with the specified named activation method
	 * to listen events generated by this component.
	 * Don't add a JavaDoc comment here, we use the default documentation
	 * from implemented interface.
	 */
    public void addListener(Class eventType, Object object, String methodName) {
        
        if (listenerList == null)
            listenerList = new LinkedList();
        
        listenerList.add(new ListenerMethod(eventType, object, methodName));
    }
    
	/* Removes all registered listeners matching the given parameters.
	 * Don't add a JavaDoc comment here, we use the default documentation
	 * from implemented interface.
	 */
    public void removeListener(Class eventType, Object target) {
        
        if (listenerList != null) {
            Iterator i = listenerList.iterator();
            while (i.hasNext()) {
                try {
                    ListenerMethod lm = (ListenerMethod) i.next();
                    if (lm.matches(eventType,target))
                        i.remove();
                } catch (java.lang.ClassCastException e) {
                    // Class cast exceptions are ignored
                }
            }
        }
    }
    
    /* Removes the event listener methods matching the given given
     * paramaters.
	 * Don't add a JavaDoc comment here, we use the default documentation
	 * from implemented interface.
	 */
    public void removeListener(Class eventType, Object target, Method method) {
        
        if (listenerList != null) {
            Iterator i = listenerList.iterator();
            while (i.hasNext()) {
                try {
                    ListenerMethod lm = (ListenerMethod) i.next();
                    if (lm.matches(eventType,target,method))
                        i.remove();
                } catch (java.lang.ClassCastException e) {
                    // Class cast exceptions are ignored
                }
            }
        }
    }

    /* Removes the event listener method matching the given given
     * paramaters.
	 * Don't add a JavaDoc comment here, we use the default documentation
	 * from implemented interface.
	 */
    public void removeListener(Class eventType, Object target, String methodName) {
        
        // Find the correct method
        Method[] methods = target.getClass().getMethods();
        Method method = null;
        for (int i=0; i<methods.length; i++)
            if (methods[i].getName().equals(methodName))
                method = methods[i];
        if (method == null) throw new IllegalArgumentException();
        
        // Remove the listeners
        if (listenerList != null) {
            Iterator i = listenerList.iterator();
            while (i.hasNext()) {
                try {
                    ListenerMethod lm = (ListenerMethod) i.next();
                    if (lm.matches(eventType,target,method))
                        i.remove();
                } catch (java.lang.ClassCastException e) {
                    // Class cast exceptions are ignored
                }
            }
        }
    }
    
    /** Remove all listeners from event router */
    public void removeAllListeners() {
    	listenerList = null;	
    }
    
    /** Send an event to all registered listeners. The listeners will decide
     * if the activation method should be called or not.
     * 
     * @param event Event to be sent to all listeners
     */
    public void fireEvent(EventObject event) {
        
        // It is not necessary to send any events if there are no listeners
        if (listenerList != null) {
            
            // Send the event to all listeners. The listeners themselves
            // will filter out unwanted events.            
            Iterator i = new LinkedList(listenerList).iterator();
            while(i.hasNext()) ((ListenerMethod)i.next()).receiveEvent(event);
        }
    }
}
